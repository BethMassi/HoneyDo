@page "/all"
@using Shared.Services
@using Shared.Models
@using Shared.Interfaces
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IFormFactor FormFactor
@inject ILocalStorage LocalStorage
@inject NavigationManager NavigationManager

<PageTitle>All "Honey Do" Items</PageTitle>

<h3>All Tasks</h3>

@* <button class="btn btn-primary" @onclick="Add">Add New Task</button> *@
<p>
    Show completed tasks: <input type="checkbox" @onclick="FilterChanged" /> 
</p>
<QuickGrid Items="@filteredHoneyDos" class="quickgrid">
    <TemplateColumn Title="Task" Sortable="true">
        @context.Task
        <div class="click-area" @onclick="() => Edit(context)"></div>
    </TemplateColumn>
    <PropertyColumn Property="@(item => item.DueDate)" Format="yyyy-MM-dd" Sortable="true" />
     <TemplateColumn Title="Complete?">
        <input type="checkbox" @bind="@context.IsComplete" @onclick="() => Complete(context)" />
    </TemplateColumn>
@{#if !ANDROID && !IOS }
    <PropertyColumn Property="@(item => item.Description)" Sortable="true"/>
    <PropertyColumn Property="@(item => item.AssignedTo)" Sortable="true"/>
@{#endif}
</QuickGrid>

@code {

    private IQueryable<HoneyDoModel> honeyDos;
    private IQueryable<HoneyDoModel> filteredHoneyDos;
    private HoneyDoModel? selected;
    private bool showCompleted = false;

    protected override void OnInitialized()
    {
        honeyDos = HoneyDoService.GetModel(LocalStorage)
                                  .AsQueryable()
                                  .OrderBy(item => item.DueDate);

        filteredHoneyDos = honeyDos.Where(item => !item.IsComplete);
    }

    private void Save()
    {
        HoneyDoService.SaveModel(LocalStorage);
    }

    private void Edit(HoneyDoModel model)
    {
        selected = model;
        NavigationManager.NavigateTo($"/edit/{model.Id}");
    }

    private void Add()
    {        
        NavigationManager.NavigateTo($"/add");
    }

    private void Complete(HoneyDoModel model)
    {
        model.IsComplete = !model.IsComplete;
        Save();
    }

    private void FilterChanged()
    {        
        showCompleted = !showCompleted;
        if (showCompleted)
        {
            //Show all
            filteredHoneyDos = honeyDos.Where(item => true);
        }
        else
        {
            filteredHoneyDos = honeyDos.Where(item => !item.IsComplete);
        }        
    }

}
